# -------------------------------------------------------------------
# Docker (установка изолированной ОС)
# -------------------------------------------------------------------

// Docker hub (хранилище образов)
// Docker image (образ данных)
// Docker container (список технологий)
// docker-compose.yml (файл с настройками необходимого софта для проекта)

# -------------------------------------------------------------------
# Команды
# -------------------------------------------------------------------

$ docker logs localhost
$ docker ps // список активных процессов
$ docker ps -a // список активных и не активных процессов
$ docker stop $(docker ps -a -q) // остановить все процессы
$ docker rm $(docker ps -a -q) // удалить все процессы

$ docker-compose build // собрать сервисы (поднять) в контейнере
$ docker-compose up --force-recreate
$ docker-compose up -d // собрать сервисы (поднять) в контейнере
$ docker-compose up -d --build //
$ docker-compose down // остановить контейнер (опустить)

$ docker exec -it <php-apache-ID> bash // провалится в контейнер (exit - выйти)
$ docker exec -it <php-apache-ID> /bin/sh // провалится в контейнер v2
$ docker-compose exec -T <php-apache-ID> composer run-script build:app  --- пересобрать проект на докере
$ docker-compose exec -T <php-apache-ID> php artisan ...

$ docker network ls // сети
$ docker network inspect

// В Docker есть несколько способов хранения данных. Наиболее распространенные:
* тома хранения данных (docker volumes /var/lib/docker/volumes/) - для продакшина
* монтирование каталогов с хоста (bind mount) - в файловой системе хоста (файл или каталог с хоста просто монтируется в контейнер).
$ docker volume ls // вольюмы (постоянные данные)
$ docker volume rm $(docker volume ls -q) // удалить все вольюмы

# -------------------------------------------------------------------
# shell скрипт с выполнением команд внутри контейнера
# -------------------------------------------------------------------

echo -e "\n\033[32m HOST-TRACKER UP!" && sleep 2 && echo -e "\033[0m\n\033[0m\033[31m PLEASE WAIT!!" &&\
sleep 5 &&\
docker-compose up -d --build && sleep 2 &&\
echo -e "\n\033[32m PRESS CTRL+C TO FINISH!!!" &&\
echo -e "\n\033[35m ADDRESS: https://localhost:8181" &&\
docker exec -t domains-check sh domains-check.sh &>/dev/null &
docker-compose up -d --build && docker exec -t ssl-check sh ssl.sh &>/dev/null &
